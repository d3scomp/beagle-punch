diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 7637d31..40a9f2a 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -2323,3 +2323,11 @@ source "security/Kconfig"
 source "crypto/Kconfig"
 
 source "lib/Kconfig"
+
+config HIGH_PRIORITY_IRQ
+	bool "High priority IRQs for am335x"
+	default y
+	help
+	  Enables high priority interrupts on am335x SOCs.
+
+
diff --git a/arch/arm/boot/dts/am335x-bone-common.dtsi b/arch/arm/boot/dts/am335x-bone-common.dtsi
index c0a097e..ee0e2ff 100644
--- a/arch/arm/boot/dts/am335x-bone-common.dtsi
+++ b/arch/arm/boot/dts/am335x-bone-common.dtsi
@@ -68,7 +68,8 @@
 			led0 {
 				label = "beaglebone:green:usr0";
 				gpios = <&gpio2 21 0>;
-				linux,default-trigger = "heartbeat";
+				/* linux,default-trigger = "heartbeat";*/
+				linux,default-trigger = "none";
 				default-state = "off";
 			};
 
diff --git a/arch/arm/boot/dts/am335x-boneblack.dts b/arch/arm/boot/dts/am335x-boneblack.dts
index a7eb55b..5a24b54 100644
--- a/arch/arm/boot/dts/am335x-boneblack.dts
+++ b/arch/arm/boot/dts/am335x-boneblack.dts
@@ -18,6 +18,27 @@
 			0x50 0x17	/* gpmc_a4.gpio1_20, OUTPUT | MODE7 | PULLUP */
 		>;
 	};
+
+	spi0_pins_s0: spi0_pins_s0 {
+	        pinctrl-single,pins = <
+       			0x150 0x30  /* spi0_sclk, INPUT_NO_PULLUP | MODE0 */
+                	0x154 0x30  /* spi0_d0, INPUT_NO_PULLUP | MODE0 */
+                        0x158 0x10  /* spi0_d1, OUTPUT_PULLUP | MODE0 */
+			0x15c 0x20  /* spi0_cs0, INPUT_PULLDOWN | MODE0 */
+
+			/* pins used by the SPI controller runnning on PRU */
+			0x038 0x2e /* P8_16, pr1_pru0_pru_r31_14, INPUT_NO_PULL | MODE6 - slave select pin*/
+			0x034 0x0e /* P8_11, pr1_pru0_pru_r30_15, OUTPUT_NO_PULL | MODE6 - pin with debug LED */
+		>;
+	};
+};
+
+&spi0 {
+	status = "okay";
+	compatible = "ti,omap4-mcspi-slave";
+	pinctrl-names = "default";
+	pinctrl-0 = <&spi0_pins_s0>;
+	interrupts = <65>;
 };
 
 &ldo3_reg {
@@ -62,8 +83,8 @@
 	operating-points = <
 		/* kHz    uV */
 		1000000	1350000
-		800000	1300000
+		/*800000	1300000
 		600000  1112000
-		300000   969000
+		300000   969000*/
 	>;
 };
diff --git a/arch/arm/boot/dts/am33xx.dtsi b/arch/arm/boot/dts/am33xx.dtsi
index b8c9b33..5045394 100644
--- a/arch/arm/boot/dts/am33xx.dtsi
+++ b/arch/arm/boot/dts/am33xx.dtsi
@@ -357,7 +357,7 @@
 			ti,timer-pwm;
 		};
 
-		pruss: pruss@4a300000 {
+		/*pruss: pruss@4a300000 {
 			compatible = "ti,pruss-v2";
 			ti,hwmods = "pruss";
 			ti,deassert-hard-reset = "pruss", "pruss";
@@ -366,8 +366,20 @@
 			interrupt-parent = <&intc>;
 			status = "disabled";
 			interrupts = <20 21 22 23 24 25 26 27>;
+		};*/
+
+		pruss: pruss@4a300000 {
+			compatible = "ti,pruss-v2-pruss";
+			ti,hwmods = "pruss";
+			ti,deassert-hard-reset = "pruss", "pruss";
+			reg = <0x4a300000 0x080000>;
+			ti,pintc-offset = <0x20000>;
+			interrupt-parent = <&intc>;
+			status = "okay";
+			interrupts = <20 21 22 23 24 25 26 27>;
 		};
 
+
 		rtc@44e3e000 {
 			compatible = "ti,da830-rtc";
 			reg = <0x44e3e000 0x1000>;
@@ -389,7 +401,6 @@
 				&edma 18
 				&edma 19>;
 			dma-names = "tx0", "rx0", "tx1", "rx1";
-			status = "disabled";
 		};
 
 		spi1: spi@481a0000 {
diff --git a/arch/arm/include/asm/irqflags.h b/arch/arm/include/asm/irqflags.h
index 1e6cca5..6802547 100644
--- a/arch/arm/include/asm/irqflags.h
+++ b/arch/arm/include/asm/irqflags.h
@@ -152,4 +152,22 @@ static inline int arch_irqs_disabled_flags(unsigned long flags)
 }
 
 #endif
+
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+unsigned long arch_local_get_hpirq_threshold(void);
+
+void arch_local_set_hpirq_threshold(unsigned long threshold);
+
+unsigned long arch_local_save_hpirq_flags(void);
+
+void arch_local_restore_hpirq_flags(unsigned long flags);
+
+int arch_local_hpirq_is_lowest_disabled(unsigned long flags);
+
+void arch_local_exception_entry(void);
+
+void arch_local_exception_exit(void);
+
+#endif
+
 #endif
diff --git a/arch/arm/include/asm/processor.h b/arch/arm/include/asm/processor.h
index 06e7d50..100df97 100644
--- a/arch/arm/include/asm/processor.h
+++ b/arch/arm/include/asm/processor.h
@@ -52,6 +52,12 @@ struct thread_struct {
 #define nommu_start_thread(regs) regs->ARM_r10 = current->mm->start_data
 #endif
 
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+#define regs_init_irq_threshold() regs->ARM_IRQ_THRESHOLD = IRQ_THRESHOLD_MASK
+#else
+#define regs_init_irq_threshold()
+#endif
+
 #define start_thread(regs,pc,sp)					\
 ({									\
 	unsigned long *stack = (unsigned long *)sp;			\
@@ -62,6 +68,7 @@ struct thread_struct {
 		regs->ARM_cpsr = USR26_MODE;				\
 	if (elf_hwcap & HWCAP_THUMB && pc & 1)				\
 		regs->ARM_cpsr |= PSR_T_BIT;				\
+	regs_init_irq_threshold();					\
 	regs->ARM_cpsr |= PSR_ENDSTATE;					\
 	regs->ARM_pc = pc & ~1;		/* pc */			\
 	regs->ARM_sp = sp;		/* sp */			\
diff --git a/arch/arm/include/asm/ptrace.h b/arch/arm/include/asm/ptrace.h
index 3d52ee1..01aa723 100644
--- a/arch/arm/include/asm/ptrace.h
+++ b/arch/arm/include/asm/ptrace.h
@@ -12,9 +12,21 @@
 
 #include <uapi/asm/ptrace.h>
 
+/*
+Mask of the irq threshold for saved irq flags.
+When the irq threshold is equal to this value, irqs are enabled.
+*/
+#define IRQ_THRESHOLD_MASK      0xff
+/*
+The lowest possible interrupt priority.
+Also the interrupt priority of all normal Linux interrupts.
+When the irq threshold of irq flags has this or smaller value, normal Linux irqs are disabled.
+*/
+#define LOWEST_IRQ_PRIORITY     0x3f
+
 #ifndef __ASSEMBLY__
 struct pt_regs {
-	unsigned long uregs[18];
+	unsigned long uregs[20];
 };
 
 #define user_mode(regs)	\
@@ -34,8 +46,13 @@ struct pt_regs {
 #define processor_mode(regs) \
 	((regs)->ARM_cpsr & MODE_MASK)
 
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+#define interrupts_enabled(regs) \
+	({ WARN_ON(((regs)->ARM_cpsr & PSR_I_BIT)); regs->ARM_IRQ_THRESHOLD == 0xff; })
+#else
 #define interrupts_enabled(regs) \
 	(!((regs)->ARM_cpsr & PSR_I_BIT))
+#endif
 
 #define fast_interrupts_enabled(regs) \
 	(!((regs)->ARM_cpsr & PSR_F_BIT))
@@ -52,7 +69,11 @@ static inline int valid_user_regs(struct pt_regs *regs)
 	 */
 	regs->ARM_cpsr &= ~(PSR_F_BIT | PSR_A_BIT);
 
-	if ((regs->ARM_cpsr & PSR_I_BIT) == 0) {
+	if ((regs->ARM_cpsr & PSR_I_BIT) == 0
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+		&& regs->ARM_IRQ_THRESHOLD == IRQ_THRESHOLD_MASK
+#endif
+		) {
 		if (mode == USR_MODE)
 			return 1;
 		if (elf_hwcap & HWCAP_26BIT && mode == USR26_MODE)
@@ -65,6 +86,9 @@ static inline int valid_user_regs(struct pt_regs *regs)
 	regs->ARM_cpsr &= PSR_f | PSR_s | PSR_x | PSR_T_BIT | MODE32_BIT;
 	if (!(elf_hwcap & HWCAP_26BIT))
 		regs->ARM_cpsr |= USR_MODE;
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	regs->ARM_IRQ_THRESHOLD = IRQ_THRESHOLD_MASK;
+#endif
 
 	return 0;
 }
diff --git a/arch/arm/include/uapi/asm/ptrace.h b/arch/arm/include/uapi/asm/ptrace.h
index 96ee092..0d69501 100644
--- a/arch/arm/include/uapi/asm/ptrace.h
+++ b/arch/arm/include/uapi/asm/ptrace.h
@@ -103,7 +103,7 @@
  */
 #ifndef __KERNEL__
 struct pt_regs {
-	long uregs[18];
+	long uregs[20];
 };
 #endif /* __KERNEL__ */
 
@@ -125,6 +125,7 @@ struct pt_regs {
 #define ARM_r1		uregs[1]
 #define ARM_r0		uregs[0]
 #define ARM_ORIG_r0	uregs[17]
+#define ARM_IRQ_THRESHOLD	uregs[18]
 
 /*
  * The size of the user-visible VFP state as seen by PTRACE_GET/SETVFPREGS
diff --git a/arch/arm/kernel/asm-offsets.c b/arch/arm/kernel/asm-offsets.c
index cf10d18..c3c2af3 100644
--- a/arch/arm/kernel/asm-offsets.c
+++ b/arch/arm/kernel/asm-offsets.c
@@ -93,6 +93,7 @@ int main(void)
   DEFINE(S_PC,			offsetof(struct pt_regs, ARM_pc));
   DEFINE(S_PSR,			offsetof(struct pt_regs, ARM_cpsr));
   DEFINE(S_OLD_R0,		offsetof(struct pt_regs, ARM_ORIG_r0));
+  DEFINE(S_IRQT,		offsetof(struct pt_regs, ARM_IRQ_THRESHOLD));
   DEFINE(S_FRAME_SIZE,		sizeof(struct pt_regs));
   BLANK();
 #ifdef CONFIG_CACHE_L2X0
diff --git a/arch/arm/kernel/early_printk.c b/arch/arm/kernel/early_printk.c
index 85aa2b2..7978b00 100644
--- a/arch/arm/kernel/early_printk.c
+++ b/arch/arm/kernel/early_printk.c
@@ -11,6 +11,7 @@
 #include <linux/kernel.h>
 #include <linux/console.h>
 #include <linux/init.h>
+#include <linux/export.h>
 
 extern void printch(int);
 
@@ -47,6 +48,7 @@ asmlinkage void early_printk(const char *fmt, ...)
 	early_write(buf, n);
 	va_end(ap);
 }
+EXPORT_SYMBOL_GPL(early_printk);
 
 static int __init setup_early_printk(char *buf)
 {
diff --git a/arch/arm/kernel/entry-armv.S b/arch/arm/kernel/entry-armv.S
index 0f82098..4c561cc 100644
--- a/arch/arm/kernel/entry-armv.S
+++ b/arch/arm/kernel/entry-armv.S
@@ -182,6 +182,12 @@ ENDPROC(__und_invalid)
 	@
 	stmia	r7, {r2 - r6}
 
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	bl arch_get_hpirq_threshold_bare
+	add	r1, sp, #S_IRQT
+	str	r0, [r1]
+#endif
+
 #ifdef CONFIG_TRACE_IRQFLAGS
 	bl	trace_hardirqs_off
 #endif
@@ -383,6 +389,12 @@ ENDPROC(__pabt_svc)
  ARM(	stmdb	r0, {sp, lr}^			)
  THUMB(	store_user_sp_lr r0, r1, S_SP - S_PC	)
 
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	bl arch_get_hpirq_threshold_bare
+	add	r1, sp, #S_IRQT
+	str	r0, [r1]
+#endif
+
 	@
 	@ Enable the alignment trap while in kernel mode
 	@
diff --git a/arch/arm/kernel/entry-common.S b/arch/arm/kernel/entry-common.S
index a6c301e..cf3368b 100644
--- a/arch/arm/kernel/entry-common.S
+++ b/arch/arm/kernel/entry-common.S
@@ -85,12 +85,15 @@ ENDPROC(ret_to_user)
  * This is how we return from a fork.
  */
 ENTRY(ret_from_fork)
+
 	bl	schedule_tail
+
 	cmp	r5, #0
 	movne	r0, r4
 	adrne	lr, BSYM(1f)
 	movne	pc, r5
-1:	get_thread_info tsk
+1:	
+	get_thread_info tsk
 	b	ret_slow_syscall
 ENDPROC(ret_from_fork)
 
@@ -345,10 +348,23 @@ ENTRY(vector_swi)
  ARM(	stmdb	r8, {sp, lr}^		)	@ Calling sp, lr
  THUMB(	mov	r8, sp			)
  THUMB(	store_user_sp_lr r8, r10, S_SP	)	@ calling sp, lr
+
 	mrs	r8, spsr			@ called from non-FIQ mode, so ok.
 	str	lr, [sp, #S_PC]			@ Save calling PC
 	str	r8, [sp, #S_PSR]		@ Save CPSR
 	str	r0, [sp, #S_OLD_R0]		@ Save OLD_R0
+
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	bl	arch_get_hpirq_threshold_bare
+	add     r1, sp, #S_IRQT
+	str     r0, [r1]
+
+	mov	r0, #0xff /* we want to enter syscall handler with irqs enabled */
+	bl	arch_set_hpirq_threshold_bare
+
+	ldmia	sp, {r0 - r3} /* reload the scratch registers */
+#endif
+
 	zero_fp
 
 	/*
diff --git a/arch/arm/kernel/entry-header.S b/arch/arm/kernel/entry-header.S
index 9a8531e..3c289a3 100644
--- a/arch/arm/kernel/entry-header.S
+++ b/arch/arm/kernel/entry-header.S
@@ -76,6 +76,7 @@
 #ifndef CONFIG_THUMB2_KERNEL
 	.macro	svc_exit, rpsr
 	msr	spsr_cxsf, \rpsr
+
 #if defined(CONFIG_CPU_V6)
 	ldr	r0, [sp]
 	strex	r1, r2, [sp]			@ clear the exclusive monitor
@@ -121,6 +122,13 @@
 	.endm
 #else	/* CONFIG_THUMB2_KERNEL */
 	.macro	svc_exit, rpsr
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	/* set up IRQ threshold */
+	add	r0, sp, #S_IRQT
+	ldr	r0, [r0]
+	bl	arch_set_hpirq_threshold_bare
+#endif
+
 	ldr	lr, [sp, #S_SP]			@ top of the stack
 	ldrd	r0, r1, [sp, #S_LR]		@ calling lr and pc
 	clrex					@ clear the exclusive monitor
@@ -135,6 +143,16 @@
 	clrex					@ clear the exclusive monitor
 	mov	r2, sp
 	load_user_sp_lr r2, r3, \offset + S_SP	@ calling sp, lr
+
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	mov	r4, r0 /* save r0 and restore after threshold is set */
+	/* set up IRQ threshold */
+	add	r0, sp, #\offset + S_IRQT
+	ldr	r0, [r0]
+	bl	arch_set_hpirq_threshold_bare
+	mov	r0, r4
+#endif
+
 	ldr	r1, [sp, #\offset + S_PSR]	@ get calling cpsr
 	ldr	lr, [sp, #\offset + S_PC]	@ get pc
 	add	sp, sp, #\offset + S_SP
diff --git a/arch/arm/kernel/process.c b/arch/arm/kernel/process.c
index c6dec5f..7662c90 100644
--- a/arch/arm/kernel/process.c
+++ b/arch/arm/kernel/process.c
@@ -165,11 +165,21 @@ void (*arm_pm_idle)(void);
 
 static void default_idle(void)
 {
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	local_irq_disable_all();
+	local_irq_enable();
+	if (arm_pm_idle)
+		arm_pm_idle();
+	else
+		cpu_do_idle();
+	local_irq_enable_all();
+#else
 	if (arm_pm_idle)
 		arm_pm_idle();
 	else
 		cpu_do_idle();
 	local_irq_enable();
+#endif
 }
 
 void (*pm_idle)(void) = default_idle;
@@ -209,8 +219,10 @@ void cpu_idle(void)
 				cpu_relax();
 			} else if (!need_resched()) {
 				stop_critical_timings();
-				if (cpuidle_idle_call())
+				if (cpuidle_idle_call()){
 					pm_idle();
+				}
+
 				start_critical_timings();
 				/*
 				 * pm_idle functions must always
@@ -220,6 +232,7 @@ void cpu_idle(void)
 			} else
 				local_irq_enable();
 		}
+
 		ledtrig_cpu(CPU_LED_IDLE_END);
 		rcu_idle_exit();
 		tick_nohz_idle_exit();
@@ -394,6 +407,11 @@ copy_thread(unsigned long clone_flags, unsigned long stack_start,
 		thread->cpu_context.r5 = stack_start;
 		childregs->ARM_cpsr = SVC_MODE;
 	}
+
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	childregs->ARM_IRQ_THRESHOLD = IRQ_THRESHOLD_MASK;
+#endif
+
 	thread->cpu_context.pc = (unsigned long)ret_from_fork;
 	thread->cpu_context.sp = (unsigned long)childregs;
 
diff --git a/arch/arm/kernel/signal.c b/arch/arm/kernel/signal.c
index 56f72d2..fbd2b08 100644
--- a/arch/arm/kernel/signal.c
+++ b/arch/arm/kernel/signal.c
@@ -637,12 +637,17 @@ static int do_signal(struct pt_regs *regs, int syscall)
 asmlinkage int
 do_work_pending(struct pt_regs *regs, unsigned int thread_flags, int syscall)
 {
+	int retval = 0;
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	/* this is entered from assembly code with irqs disabled (called from assembly only) */
+	arch_local_exception_entry();
+#endif
 	do {
 		if (likely(thread_flags & _TIF_NEED_RESCHED)) {
 			schedule();
 		} else {
 			if (unlikely(!user_mode(regs)))
-				return 0;
+				goto pending_ending;
 			local_irq_enable();
 			if (thread_flags & _TIF_SIGPENDING) {
 				int restart = do_signal(regs, syscall);
@@ -652,7 +657,8 @@ do_work_pending(struct pt_regs *regs, unsigned int thread_flags, int syscall)
 					 * Deal with it without leaving
 					 * the kernel space.
 					 */
-					return restart;
+					retval = restart;
+					goto pending_ending;
 				}
 				syscall = 0;
 			} else {
@@ -663,5 +669,10 @@ do_work_pending(struct pt_regs *regs, unsigned int thread_flags, int syscall)
 		local_irq_disable();
 		thread_flags = current_thread_info()->flags;
 	} while (thread_flags & _TIF_WORK_MASK);
-	return 0;
+
+pending_ending:
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	arch_local_exception_exit();
+#endif
+	return retval;
 }
diff --git a/arch/arm/kernel/suspend.c b/arch/arm/kernel/suspend.c
index 358bca3..f02b325 100644
--- a/arch/arm/kernel/suspend.c
+++ b/arch/arm/kernel/suspend.c
@@ -18,6 +18,8 @@ extern void cpu_resume_mmu(void);
 void __cpu_suspend_save(u32 *ptr, u32 ptrsz, u32 sp, u32 *save_ptr)
 {
 	u32 *ctx = ptr;
+	early_printk("***************SUSPEND*****************************************\n");
+
 
 	*save_ptr = virt_to_phys(ptr);
 
diff --git a/arch/arm/kernel/traps.c b/arch/arm/kernel/traps.c
index b0179b8..0e6e2e8 100644
--- a/arch/arm/kernel/traps.c
+++ b/arch/arm/kernel/traps.c
@@ -406,6 +406,10 @@ asmlinkage void __exception do_undefinstr(struct pt_regs *regs)
 	siginfo_t info;
 	void __user *pc;
 
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	arch_local_exception_entry();
+#endif
+
 	pc = (void __user *)instruction_pointer(regs);
 
 	if (processor_mode(regs) == SVC_MODE) {
@@ -434,7 +438,7 @@ asmlinkage void __exception do_undefinstr(struct pt_regs *regs)
 	}
 
 	if (call_undef_hook(regs, instr) == 0)
-		return;
+		goto undefinstr_end;
 
 die_sig:
 #ifdef CONFIG_DEBUG_USER
@@ -451,6 +455,11 @@ die_sig:
 	info.si_addr  = pc;
 
 	arm_notify_die("Oops - undefined instruction", regs, &info, 0, 6);
+
+undefinstr_end:
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	arch_local_exception_exit();
+#endif
 }
 
 asmlinkage void do_unexp_fiq (struct pt_regs *regs)
diff --git a/arch/arm/mach-omap2/irq.c b/arch/arm/mach-omap2/irq.c
index 57d1b7d..a8d8139 100644
--- a/arch/arm/mach-omap2/irq.c
+++ b/arch/arm/mach-omap2/irq.c
@@ -23,6 +23,14 @@
 #include <linux/of_address.h>
 #include <linux/of_irq.h>
 
+#include <asm/barrier.h>
+#include <linux/irqflags.h>
+#include <linux/kconfig.h>
+#include <linux/export.h>
+#include <linux/kernel.h>
+#include "../../../kernel/sched/sched.h"
+#include <linux/irqnr.h>
+
 #include "soc.h"
 #include "iomap.h"
 #include "common.h"
@@ -45,12 +53,182 @@
 #define IRQ_BITS_PER_REG	32
 
 #define OMAP2_IRQ_BASE		OMAP2_L4_IO_ADDRESS(OMAP24XX_IC_BASE)
-#define OMAP3_IRQ_BASE		OMAP2_L4_IO_ADDRESS(OMAP34XX_IC_BASE)
+//#define OMAP3_IRQ_BASE		OMAP2_L4_IO_ADDRESS(OMAP34XX_IC_BASE)
 #define INTCPS_SIR_IRQ_OFFSET	0x0040	/* omap2/3 active interrupt offset */
 #define ACTIVEIRQ_MASK		0x7f	/* omap2/3 active interrupt bits */
 #define INTCPS_NR_MIR_REGS	3
 #define INTCPS_NR_IRQS		96
 
+#define INTC_IRQ_PRIORITY_OFFSET	0x60
+#define INTC_ILR_0_OFFSET	0x100
+
+#define OMAP3_IRQ_BASE          OMAP2_L4_IO_ADDRESS(OMAP34XX_IC_BASE) 
+#define INTC_THRESHOLD_OFFSET   0x68
+#define IRQ_PRIORITY_MASK       0x7f
+
+static struct irq_domain *domain;
+
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+
+/* sets priority of a given interrupt request */
+int irq_set_priority(unsigned int irq, int priority)
+{
+	struct irq_desc *desc = irq_to_desc(irq);
+	if (!desc)
+	{
+		return -ENODEV;
+	}
+
+	irq = desc->irq_data.hwirq; /* hwirq */
+	if (priority < 0 || priority > LOWEST_IRQ_PRIORITY)
+	{
+		return -EINVAL;
+	}
+
+	iowrite32((priority & LOWEST_IRQ_PRIORITY) << 2, OMAP3_IRQ_BASE + INTC_ILR_0_OFFSET + 0x4 * irq);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(irq_set_priority);
+
+/* returns priority of a given interrupt request */
+int irq_get_priority(unsigned int irq)
+{
+	struct irq_desc *desc = irq_to_desc(irq);
+	if (!desc)
+	{
+		return -ENODEV;
+	}
+
+	irq = desc->irq_data.hwirq;
+
+	return (int)((ioread32(OMAP3_IRQ_BASE + INTC_ILR_0_OFFSET + 0x4 * irq) >> 2) & LOWEST_IRQ_PRIORITY);
+}
+EXPORT_SYMBOL_GPL(irq_get_priority);
+
+/* called from assembler */
+/* returns the current interrupt priority threshold */
+unsigned int arch_get_hpirq_threshold_bare(void)
+{
+	unsigned int flags;
+	mb();
+	flags = (unsigned int)ioread32(OMAP3_IRQ_BASE + INTC_THRESHOLD_OFFSET) & IRQ_THRESHOLD_MASK;
+	mb();
+	return flags;
+}
+
+/* called from assembler */
+/* sets the current interrupt priority threshold */
+void arch_set_hpirq_threshold_bare(unsigned int threshold)
+{
+	mb();
+	iowrite32(threshold & IRQ_THRESHOLD_MASK, OMAP3_IRQ_BASE + INTC_THRESHOLD_OFFSET);
+	mb();
+}
+
+/*
+Disables all interrupts with the lowest priority (standard interrupts) and enables all interrupts with higher priority.
+Used on exception handler entry.
+*/
+void arch_local_exception_entry(void)
+{
+	arch_set_hpirq_threshold_bare(LOWEST_IRQ_PRIORITY);
+	arch_local_irq_enable();
+}
+EXPORT_SYMBOL_GPL(arch_local_exception_entry);
+
+/*
+Disables all interrupts using the PSR.
+Used on exception handler exit.
+*/
+void arch_local_exception_exit(void)
+{
+	arch_local_irq_disable();
+}
+EXPORT_SYMBOL_GPL(arch_local_exception_exit);
+
+/* whether the interrupt controller has been initialized */
+static atomic_t __hpirq_initialized = ATOMIC_INIT(0);
+
+/* returns the current interrupt priority threshold, or a default value if the interrupt controller is not initialized yet */
+unsigned long arch_local_get_hpirq_threshold(void)
+{
+	if (!early_boot_irqs_disabled && atomic_read(&__hpirq_initialized))
+	{
+		unsigned long retval;
+		retval = (unsigned long)arch_get_hpirq_threshold_bare();
+		return retval;
+	}
+	
+	if (arch_irqs_disabled_flags(arch_local_save_flags()))
+		return 0x3f;
+	return IRQ_THRESHOLD_MASK;
+}
+EXPORT_SYMBOL_GPL(arch_local_get_hpirq_threshold);
+
+/* sets the current interrupt priority threshold, if the interrupt controller has been initialized.
+otherwise enables/disables interrupts using the PSR accroding to the threshold passed (whether the threshold disabled standard interrupts or not) */
+void arch_local_set_hpirq_threshold(unsigned long threshold)
+{
+	if (!early_boot_irqs_disabled && atomic_read(&__hpirq_initialized))
+	{
+		unsigned long flags = arch_local_irq_save();
+		arch_set_hpirq_threshold_bare(threshold);
+		arch_local_irq_restore(flags);
+	}
+	else
+	{
+		if ((threshold & IRQ_THRESHOLD_MASK) == IRQ_THRESHOLD_MASK)
+		{
+			arch_local_irq_enable();
+		}
+		else
+		{
+			arch_local_irq_disable();
+		}
+	}
+}
+EXPORT_SYMBOL_GPL(arch_local_set_hpirq_threshold);
+
+/* Returns current interrupt flags.
+ The interrupt flags combine interrupt status from the PSR and the interrupt priority threshold. */
+unsigned long arch_local_save_hpirq_flags(void)
+{
+	unsigned long flags = arch_local_save_flags();
+	flags = (flags << 8) | arch_local_get_hpirq_threshold();
+	return flags;
+}
+EXPORT_SYMBOL_GPL(arch_local_save_hpirq_flags);
+
+/* Returns interrupt flags passed as parameter.
+ The interrupt flags combine interrupt status from the PSR and the interrupt priority threshold. */
+void arch_local_restore_hpirq_flags(unsigned long flags)
+{
+	unsigned long psr_flags = flags >> 8;
+	if (arch_irqs_disabled_flags(psr_flags))
+	{
+		arch_local_irq_restore(psr_flags);
+		arch_local_set_hpirq_threshold(flags);
+	}
+	else
+	{
+		arch_local_set_hpirq_threshold(flags);
+		arch_local_irq_restore(psr_flags);
+	}
+}
+EXPORT_SYMBOL_GPL(arch_local_restore_hpirq_flags);
+
+/* returns whether the standard Linux interrupts (interrupts with the lowest priority)
+ are disables, when the given interrupt flags are set */
+int arch_local_hpirq_is_lowest_disabled(unsigned long flags)
+{
+	unsigned long psr_flags = flags >> 8;
+	return arch_irqs_disabled_flags(psr_flags) || ((flags & IRQ_THRESHOLD_MASK) != IRQ_THRESHOLD_MASK);
+}
+EXPORT_SYMBOL_GPL(arch_local_hpirq_is_lowest_disabled);
+
+#endif
+
+
 /*
  * OMAP2 has a number of different interrupt controllers, each interrupt
  * controller is identified as its own "bank". Register definitions are
@@ -67,8 +245,6 @@ static struct omap_irq_bank {
 	},
 };
 
-static struct irq_domain *domain;
-
 /* Structure to save interrupt controller context */
 struct omap3_intc_regs {
 	u32 sysconfig;
@@ -97,15 +273,40 @@ static void omap_ack_irq(struct irq_data *d)
 	intc_bank_write_reg(0x1, &irq_banks[0], INTC_CONTROL);
 }
 
+#ifndef CONFIG_HIGH_PRIORITY_IRQ
 static void omap_mask_ack_irq(struct irq_data *d)
 {
 	irq_gc_mask_disable_reg(d);
 	omap_ack_irq(d);
 }
+#else
+static void omap_mask_ack_irq(struct irq_data *d)
+{
+	irq_gc_mask_disable_reg(d);
+}
+#endif
+
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+void omap_irq_printk(void)
+{
+	int i;
+	early_printk("IRQ priorities:\n");
+	for (i = 0; i < 128; ++i)
+	{
+		u32 priority = ioread32(OMAP3_IRQ_BASE + INTC_ILR_0_OFFSET + i * 0x4);
+		early_printk("%d: %u\n", i, priority >> 2);
+	}
+	early_printk("current flags: %x\n", (unsigned int)arch_local_save_hpirq_flags());
+}
+EXPORT_SYMBOL_GPL(omap_irq_printk);
+#endif
 
 static void __init omap_irq_bank_init_one(struct omap_irq_bank *bank)
 {
 	unsigned long tmp;
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	unsigned int i;
+#endif
 
 	tmp = intc_bank_read_reg(bank, INTC_REVISION) & 0xff;
 	pr_info("IRQ: Found an INTC at 0x%p (revision %ld.%ld) with %d interrupts\n",
@@ -120,6 +321,14 @@ static void __init omap_irq_bank_init_one(struct omap_irq_bank *bank)
 
 	/* Enable autoidle */
 	intc_bank_write_reg(1 << 0, bank, INTC_SYSCONFIG);
+
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	pr_info("IRQ: count: %u", bank->nr_irqs);
+	for (i = 0; i < bank->nr_irqs; ++i)
+	{
+		intc_bank_write_reg(LOWEST_IRQ_PRIORITY << 2, bank, INTC_ILR_0_OFFSET + i * sizeof(u32));
+	}
+#endif
 }
 
 int omap_irq_pending(void)
@@ -166,6 +375,10 @@ static void __init omap_init_irq(u32 base, int nr_irqs,
 	unsigned int nr_banks = 0;
 	int i, j, irq_base;
 
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	pr_info("am335x high priority IRQs enabled!\n");
+#endif
+
 	omap_irq_base = ioremap(base, SZ_4K);
 	if (WARN_ON(!omap_irq_base))
 		return;
@@ -202,6 +415,10 @@ static void __init omap_init_irq(u32 base, int nr_irqs,
 
 	pr_info("Total of %ld interrupts on %d active controller%s\n",
 		nr_of_irqs, nr_banks, nr_banks > 1 ? "s" : "");
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	mb();
+	atomic_set(&__hpirq_initialized, 1);
+#endif
 }
 
 void __init omap2_init_irq(void)
@@ -364,9 +581,151 @@ void omap3_intc_resume_idle(void)
 	intc_bank_write_reg(1, &irq_banks[0], INTC_SYSCONFIG);
 }
 
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+static inline u32 am33xx_get_irq_priority(void __iomem *base_addr)
+{
+	return ioread32(base_addr + INTC_IRQ_PRIORITY_OFFSET) & 0x3f;
+}
+
+#define PIS(offset) \
+	irqnr = readl_relaxed(base_addr + offset); \
+	if (irqnr != 0) \
+	{ \
+		early_printk("I" #offset ": %x, m: %x, r: %x\n", irqnr, readl_relaxed(base_addr + offset + 4), readl_relaxed(base_addr + offset + 18)); \
+		early_printk("%x\n", readl_relaxed(base_addr + INTC_THRESHOLD_OFFSET)); \
+	}
+
+void omap_intc_print_pending(void)
+{
+	u32 irqnr;
+	void __iomem *base_addr = OMAP3_IRQ_BASE;
+
+	PIS(0x80);
+	PIS(0xa0);
+	PIS(0xc0);
+	PIS(0xe0);
+}
+EXPORT_SYMBOL_GPL(omap_intc_print_pending);
+
+/* handler invokcation for higher priority interrupts, immediately calls the registered interrupt handler */
+static void handle_high_priority_irq(u32 irqnr, struct pt_regs *regs)
+{
+	struct irq_desc *desc = irq_to_desc(irqnr);
+	struct irqaction *action;
+	WARN_ON(!desc);
+
+	action = desc->action;
+	do
+	{
+		action->handler(desc->irq_data.irq, action->dev_id);
+		action = action->next;
+	} while (action);
+}
+
+/* returns whether any interrupt requests are active and not masked */
+static int any_interrupt_active(void __iomem *base_addr)
+{
+	u32 any = readl_relaxed(base_addr + 0x98)
+		|| readl_relaxed(base_addr + 0xb8)
+		|| readl_relaxed(base_addr + 0xd8)
+#if defined(CONFIG_SOC_TI81XX) || defined(CONFIG_SOC_AM33XX)
+		|| readl_relaxed(base_addr + 0xf8)
+#endif
+		;
+	return any;
+}
+
+/*
+Interrupt handler.
+Sets the interrupt threshold to the priority of the current interrupt request,
+thus disabling all interrupts with the same or lower priority.
+Then enables interrupts in the PSR and invokes the interrupt handler.
+After the handler completes, disables interrupt in PSR and restores the previous interrupt threshold.
+*/
+static inline void omap_intc_handle_priority_irq(void __iomem *base_addr, struct pt_regs *regs)
+{
+	/*
+	 * This function is entered from asm irq handler with all irqs disabled,
+	 * but we want the IRQ handler to be interruptible by higher priority IRQs.
+	 */
+
+	u32 irqnr;
+	unsigned long saved_priority_threshold;
+	int prev;
+
+	irqnr = ioread32(base_addr + INTCPS_SIR_IRQ_OFFSET);
+	/* Check that the interrupt is valid using the spurious interrupt flag. */
+	if (irqnr & (~ACTIVEIRQ_MASK))
+	{
+		/* spurious IRQ happened.
+		 acknowledge the interrupt controller so that it computes new interrupt number */
+		iowrite32(0x1, base_addr + INTC_CONTROL);
+		mb();
+	
+		/* wait until the interrupt controller computes the new interrupt number*/
+		while (irqnr & (~ACTIVEIRQ_MASK))
+		{
+			irqnr = ioread32(base_addr + INTCPS_SIR_IRQ_OFFSET);
+
+			/* if no interrupt request is pending, return from the handler */
+			if (!any_interrupt_active(base_addr))
+			{
+				return;
+			}
+		}
+	}
+
+	irqnr &= ACTIVEIRQ_MASK;
+
+	if (early_boot_irqs_disabled || !atomic_read(&__hpirq_initialized))
+	{
+		iowrite32(0x1, base_addr + INTC_CONTROL);
+		irqnr = irq_find_mapping(domain, irqnr);
+		handle_IRQ(irqnr, regs);
+	}
+	else
+	{
+		u32 priority;
+		/* save previous priority threshold */
+		saved_priority_threshold = arch_local_get_hpirq_threshold();
+		/* set new priority threshold to the priority of the current interrupt */
+		priority = am33xx_get_irq_priority(base_addr);
+
+		iowrite32(priority, base_addr + INTC_THRESHOLD); /* acknowledge the interrupt controller that we got the interrupt number */
+		mb();
+		/*
+		 * Inform the interrupt controller that we have taken care of the current interrupt.
+		 * Does ack and mask for all interrupts with the priority of the current one.
+		 */
+		iowrite32(0x1, base_addr + INTC_CONTROL);
+		/* This shall be a data synchronization barrier - mb() = dsb() + outer_sync() */
+		mb();
+		arch_local_irq_enable();
+
+		irqnr = irq_find_mapping(domain, irqnr);
+		if (priority == LOWEST_IRQ_PRIORITY)
+			handle_IRQ(irqnr, regs);
+		else
+		{
+			handle_high_priority_irq(irqnr, regs);
+		}
+
+		/* disable interrupt fully before return to assembler, where the saved context is restored */
+		arch_local_irq_disable();
+		mb();
+		/* Set the allowed priority of interrupts to the previous one. */
+		iowrite32(saved_priority_threshold, base_addr + INTC_THRESHOLD);
+	}
+}
+#endif
+
 asmlinkage void __exception_irq_entry omap3_intc_handle_irq(struct pt_regs *regs)
 {
 	void __iomem *base_addr = OMAP3_IRQ_BASE;
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	omap_intc_handle_priority_irq(base_addr, regs);
+#else
 	omap_intc_handle_irq(base_addr, regs);
+#endif
 }
 #endif /* CONFIG_ARCH_OMAP3 */
diff --git a/arch/arm/mm/fault.c b/arch/arm/mm/fault.c
index 5dbf13f..00ed449 100644
--- a/arch/arm/mm/fault.c
+++ b/arch/arm/mm/fault.c
@@ -543,8 +543,12 @@ do_DataAbort(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 	const struct fsr_info *inf = fsr_info + fsr_fs(fsr);
 	struct siginfo info;
 
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	arch_local_exception_entry();
+#endif
+
 	if (!inf->fn(addr, fsr & ~FSR_LNX_PF, regs))
-		return;
+		goto dataabort_end;
 
 	printk(KERN_ALERT "Unhandled fault: %s (0x%03x) at 0x%08lx\n",
 		inf->name, fsr, addr);
@@ -554,6 +558,11 @@ do_DataAbort(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 	info.si_code  = inf->code;
 	info.si_addr  = (void __user *)addr;
 	arm_notify_die("", regs, &info, fsr, 0);
+
+dataabort_end:
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	arch_local_exception_exit();
+#endif
 }
 
 void __init
@@ -575,8 +584,12 @@ do_PrefetchAbort(unsigned long addr, unsigned int ifsr, struct pt_regs *regs)
 	const struct fsr_info *inf = ifsr_info + fsr_fs(ifsr);
 	struct siginfo info;
 
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	arch_local_exception_entry();
+#endif
+
 	if (!inf->fn(addr, ifsr | FSR_LNX_PF, regs))
-		return;
+		goto prefetchabort_end;
 
 	printk(KERN_ALERT "Unhandled prefetch abort: %s (0x%03x) at 0x%08lx\n",
 		inf->name, ifsr, addr);
@@ -586,6 +599,11 @@ do_PrefetchAbort(unsigned long addr, unsigned int ifsr, struct pt_regs *regs)
 	info.si_code  = inf->code;
 	info.si_addr  = (void __user *)addr;
 	arm_notify_die("", regs, &info, ifsr, 0);
+
+prefetchabort_end:
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+	arch_local_exception_exit();
+#endif
 }
 
 #ifndef CONFIG_ARM_LPAE
diff --git a/include/linux/irqflags.h b/include/linux/irqflags.h
index d176d65..647273c 100644
--- a/include/linux/irqflags.h
+++ b/include/linux/irqflags.h
@@ -53,6 +53,45 @@
 # define start_critical_timings() do { } while (0)
 #endif
 
+#ifdef CONFIG_HIGH_PRIORITY_IRQ
+
+extern int irq_set_priority(unsigned int irq, int priority);
+extern int irq_get_priority(unsigned int irq);
+
+#define raw_local_irq_disable()		arch_local_set_hpirq_threshold(LOWEST_IRQ_PRIORITY)
+#define raw_local_irq_enable()		arch_local_set_hpirq_threshold(IRQ_THRESHOLD_MASK)
+#define raw_local_irq_save(flags)			\
+	do {						\
+		typecheck(unsigned long, flags);	\
+		flags = arch_local_save_hpirq_flags();	\
+		raw_local_irq_disable();		\
+	} while (0)
+#define raw_local_irq_restore(flags)			\
+	do {						\
+		typecheck(unsigned long, flags);	\
+		arch_local_restore_hpirq_flags(flags);	\
+	} while (0)
+#define raw_local_save_flags(flags)			\
+	do {						\
+		typecheck(unsigned long, flags);	\
+		flags = arch_local_save_hpirq_flags();	\
+	} while (0)
+#define raw_irqs_disabled_flags(flags)			\
+	({						\
+		typecheck(unsigned long, flags);	\
+		arch_local_hpirq_is_lowest_disabled(flags);	\
+	})
+//#define raw_irqs_disabled()		(arch_irqs_disabled())
+//#define raw_safe_halt()			arch_safe_halt()
+#define raw_local_irq_disable_all()	arch_local_irq_disable()
+#define raw_local_irq_enable_all()			\
+	do {						\
+		arch_local_irq_enable();		\
+		arch_local_set_hpirq_threshold(IRQ_THRESHOLD_MASK);	\
+	} while (0)
+
+#else /* CONFIG_HIGH_PRIORITY_IRQ */
+
 /*
  * Wrap the arch provided IRQ routines to provide appropriate checks.
  */
@@ -81,6 +120,11 @@
 #define raw_irqs_disabled()		(arch_irqs_disabled())
 #define raw_safe_halt()			arch_safe_halt()
 
+#define raw_local_irq_disable_all()	arch_local_irq_disable()
+#define raw_local_irq_enable_all()	arch_local_irq_enable()
+
+#endif
+
 /*
  * The local_irq_*() APIs are equal to the raw_local_irq*()
  * if !TRACE_IRQFLAGS.
@@ -90,6 +134,10 @@
 	do { trace_hardirqs_on(); raw_local_irq_enable(); } while (0)
 #define local_irq_disable() \
 	do { raw_local_irq_disable(); trace_hardirqs_off(); } while (0)
+#define local_irq_enable_all() \
+	do { trace_hardirqs_on(); raw_local_irq_enable_all(); } while (0)
+#define local_irq_disable_all() \
+	do { raw_local_irq_disable_all(); trace_hardirqs_off(); } while (0)
 #define local_irq_save(flags)				\
 	do {						\
 		raw_local_irq_save(flags);		\
@@ -135,6 +183,8 @@
 
 #define local_irq_enable()	do { raw_local_irq_enable(); } while (0)
 #define local_irq_disable()	do { raw_local_irq_disable(); } while (0)
+#define local_irq_enable_all()	do { raw_local_irq_enable_all(); } while (0)
+#define local_irq_disable_all()	do { raw_local_irq_disable_all(); } while (0)
 #define local_irq_save(flags)					\
 	do {							\
 		raw_local_irq_save(flags);			\
diff --git a/include/uapi/drm/drm.h b/include/uapi/drm/drm.h
index 8d1e2bb..73a99e4 100644
--- a/include/uapi/drm/drm.h
+++ b/include/uapi/drm/drm.h
@@ -36,7 +36,7 @@
 #ifndef _DRM_H_
 #define _DRM_H_
 
-#if defined(__linux__)
+#if defined(__KERNEL__) || defined(__linux__)
 
 #include <linux/types.h>
 #include <asm/ioctl.h>
diff --git a/init/main.c b/init/main.c
index cee4b5c..a74bbf2 100644
--- a/init/main.c
+++ b/init/main.c
@@ -485,7 +485,7 @@ asmlinkage void __init start_kernel(void)
 
 	cgroup_init_early();
 
-	local_irq_disable();
+	local_irq_disable_all();
 	early_boot_irqs_disabled = true;
 
 /*
@@ -540,7 +540,7 @@ asmlinkage void __init start_kernel(void)
 	if (!irqs_disabled()) {
 		printk(KERN_WARNING "start_kernel(): bug: interrupts were "
 				"enabled *very* early, fixing it\n");
-		local_irq_disable();
+		local_irq_disable_all();
 	}
 	idr_init_cache();
 	perf_event_init();
@@ -560,7 +560,7 @@ asmlinkage void __init start_kernel(void)
 		printk(KERN_CRIT "start_kernel(): bug: interrupts were "
 				 "enabled early\n");
 	early_boot_irqs_disabled = false;
-	local_irq_enable();
+	local_irq_enable_all();
 
 	kmem_cache_init_late();
 
